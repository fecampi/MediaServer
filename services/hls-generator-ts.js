const ffmpeg = require('fluent-ffmpeg');
const ffmpegInstaller = require('@ffmpeg-installer/ffmpeg');
const fs = require('fs');
const path = require('path');

ffmpeg.setFfmpegPath(ffmpegInstaller.path);

/**
 * Fun√ß√£o para gerar HLS a partir de um v√≠deo com m√∫ltiplas resolu√ß√µes
 * @param {string} inputFile Caminho do arquivo de entrada (v√≠deo)
 * @param {string} outputFolder Caminho da pasta de sa√≠da
 */

async function generateHLS(inputFile, outputFolder) {
    return new Promise((resolve, reject) => {
        console.log('üé¨ Iniciando processo de convers√£o HLS...');
        console.log(`üìÅ Arquivo de entrada: ${inputFile}`);
        console.log(`üìÇ Pasta de sa√≠da: ${outputFolder}`);
        console.log('üîç Analisando metadados do v√≠deo...');
        ffmpeg(inputFile).ffprobe((err, metadata) => {
            if (err) {
                console.error('‚ùå Erro ao obter metadados:', err);
                reject(err);
                return;
            }
            console.log('‚úÖ Metadados obtidos com sucesso!');
            // Obt√©m o primeiro fluxo de v√≠deo
            console.log('üîç Procurando fluxo de v√≠deo nos metadados...');
            const videoStream = metadata.streams.find(stream => stream.codec_type === 'video');
            if (videoStream) {
                const width = videoStream.width;
                const height = videoStream.height;
                const duration = metadata.format.duration;
                const bitrate = metadata.format.bit_rate;
                console.log('üìπ Informa√ß√µes do v√≠deo original:');
                console.log(`   ‚Ä¢ Resolu√ß√£o: ${width}x${height}`);
                console.log(`   ‚Ä¢ Dura√ß√£o: ${duration ? Math.round(duration) : 'N/A'} segundos`);
                console.log(`   ‚Ä¢ Bitrate: ${bitrate ? Math.round(bitrate/1000) : 'N/A'} kbps`);
                console.log(`   ‚Ä¢ Codec: ${videoStream.codec_name}`);
                // Resolu√ß√µes desejadas
                const resolutions = [
                    { label: '1080p', width: 1920, height: 1080 },
                    { label: '720p', width: 1280, height: 720 },
                    { label: '480p', width: 854, height: 480 },
                    { label: '360p', width: 640, height: 360 }
                ];
                console.log('‚öôÔ∏è Filtrando resolu√ß√µes compat√≠veis...');
                // Filtra as resolu√ß√µes que s√£o menores ou iguais √† resolu√ß√£o original
                const validResolutions = resolutions.filter(resolution => resolution.width <= width && resolution.height <= height);
                console.log(`üìä Resolu√ß√µes que ser√£o processadas: ${validResolutions.map(r => r.label).join(', ')}`);
                // Usa diretamente a pasta de sa√≠da informada
                const outputVideoFolder = outputFolder;
                console.log(`üìÅ Usando pasta de sa√≠da: ${outputVideoFolder}`);
                if (!fs.existsSync(outputVideoFolder)) {
                    fs.mkdirSync(outputVideoFolder, { recursive: true });
                    console.log('‚úÖ Pasta de sa√≠da criada com sucesso!');
                } else {
                    console.log('üìÅ Pasta de sa√≠da j√° existe');
                }
                // Gerar fluxos de v√≠deo e arquivos .m3u8 para cada resolu√ß√£o
                console.log('üöÄ Iniciando processamento das resolu√ß√µes...');
                let processedCount = 0;
                const totalResolutions = validResolutions.length;
                const videoStreams = validResolutions.map((resolution, index) => {
                    return new Promise((resolve2, reject2) => {
                        const outputFile = path.join(outputVideoFolder, `output_${resolution.label}.m3u8`);
                        const segmentFile = path.join(outputVideoFolder, `output_${resolution.label}_%03d.ts`);
                        console.log(`\nüéØ Processando resolu√ß√£o ${resolution.label} (${index + 1}/${totalResolutions})`);
                        console.log(`   ‚Ä¢ Sa√≠da: ${path.basename(outputFile)}`);
                        console.log(`   ‚Ä¢ Resolu√ß√£o alvo: ${resolution.width}x${resolution.height}`);
                        const startTime = Date.now();
                        ffmpeg(inputFile)
                            .outputOptions([
                                `-vf scale=${resolution.width}:${resolution.height}`,
                                '-c:v libx264',
                                '-preset fast',
                                '-crf 23',
                                '-c:a aac',
                                '-b:a 128k',
                                '-f hls',
                                `-hls_time 10`,
                                `-hls_list_size 0`,
                                `-hls_segment_filename ${segmentFile}`,
                                '-map 0:v:0',
                                '-map 0:a:0?',
                                '-map 0:a:1?',
                                '-map 0:a:2?',
                                '-map 0:a:3?',
                                '-map 0:a:4?',
                                '-map 0:a:5?'
                            ])
                            .output(outputFile)
                            .on('start', (commandLine) => {
                                console.log(`‚ö° Comando FFmpeg iniciado para ${resolution.label}`);
                                console.log(`   Comando: ${commandLine.substring(0, 100)}...`);
                            })
                            .on('progress', (progress) => {
                                if (progress.percent) {
                                    const percent = Math.round(progress.percent);
                                    console.log(`üìä ${resolution.label}: ${percent}% conclu√≠do (${progress.currentFps || 0} fps)`);
                                }
                            })
                            .on('end', () => {
                                const endTime = Date.now();
                                const duration = Math.round((endTime - startTime) / 1000);
                                processedCount++;
                                console.log(`‚úÖ ${resolution.label} processado com sucesso! (${duration}s)`);
                                console.log(`üìà Progresso geral: ${processedCount}/${totalResolutions} resolu√ß√µes conclu√≠das`);
                                resolve2();
                            })
                            .on('error', (err) => {
                                console.error(`‚ùå Erro durante o processamento para ${resolution.label}:`, err.message);
                                reject2(err);
                            })
                            .run();
                    });
                });
                // Aguarda todos os v√≠deos serem gerados e cria o arquivo mestre M3U8
                console.log('\n‚è≥ Aguardando conclus√£o de todas as resolu√ß√µes...');
                const startTime = Date.now();
                Promise.all(videoStreams)
                    .then(() => {
                        const totalTime = Math.round((Date.now() - startTime) / 1000);
                        console.log(`\nüéâ Todas as resolu√ß√µes processadas com sucesso! (Tempo total: ${totalTime}s)`);
                        console.log('üìù Criando arquivo mestre M3U8...');
                        // Estimativas de largura de banda para cada resolu√ß√£o (em Kbps)
                        const resolutionBandwidth = {
                            '1080p': 4000000,
                            '720p': 2500000,
                            '480p': 1000000,
                            '360p': 500000
                        };
                        console.log('‚öôÔ∏è Configurando larguras de banda para cada resolu√ß√£o:');
                        const masterPlaylist = validResolutions.map(resolution => {
                            const bandWidth = resolutionBandwidth[resolution.label] || 1000000;
                            console.log(`   ‚Ä¢ ${resolution.label}: ${bandWidth/1000} Kbps`);
                            return `#EXT-X-STREAM-INF:BANDWIDTH=${bandWidth},RESOLUTION=${resolution.width}x${resolution.height}\noutput_${resolution.label}.m3u8`;
                        }).join('\n');
                        // Adiciona as informa√ß√µes de cabe√ßalho para o arquivo mestre
                        const masterFileContent = `#EXTM3U\n${masterPlaylist}`;
                        // Cria o arquivo mestre M3U8
                        const masterFile = path.join(outputVideoFolder, 'master.m3u8');
                        fs.writeFileSync(masterFile, masterFileContent);
                        console.log('‚úÖ Arquivo mestre M3U8 gerado com sucesso!');
                        console.log(`üìÅ Arquivo criado: ${masterFile}`);
                        console.log('\nüèÅ Processo de convers√£o HLS conclu√≠do com sucesso!');
                        console.log(`üìä Estat√≠sticas finais:`);
                        console.log(`   ‚Ä¢ Resolu√ß√µes processadas: ${validResolutions.length}`);
                        console.log(`   ‚Ä¢ Tempo total: ${totalTime}s`);
                        console.log(`   ‚Ä¢ Pasta de sa√≠da: ${outputVideoFolder}`);
                        resolve();
                    })
                    .catch(err => {
                        console.error('\n‚ùå Erro durante a cria√ß√£o dos arquivos de v√≠deo HLS:', err.message);
                        console.error('üí° Verifique se o arquivo de entrada existe e est√° acess√≠vel');
                        reject(err);
                    });
            } else {
                console.error('‚ùå Fluxo de v√≠deo n√£o encontrado nos metadados');
                console.log('üí° Verifique se o arquivo √© um v√≠deo v√°lido');
                reject(new Error('Fluxo de v√≠deo n√£o encontrado nos metadados'));
            }
        });
    });
}

module.exports = { generateHLS };