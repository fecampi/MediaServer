<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Media Server HLS - Upload</title>

    <!-- Bootstrap CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />

    <style>
      .upload-area {
        border: 2px dashed #e50914;
        border-radius: 10px;
        padding: 2rem;
        text-align: center;
        background: #1e1e1e;
        transition: all 0.3s ease;
        cursor: pointer;
        color: #fff;
      }

      .upload-area:hover {
        border-color: #ff1a1a;
        background: #2a2a2a;
      }

      .upload-area.dragover {
        border-color: #ff1a1a;
        background: #2a2a2a;
      }

      .progress-bar {
        width: 100%;
        height: 6px;
        background-color: #333;
        border-radius: 3px;
        overflow: hidden;
        margin: 1rem 0;
        display: none;
      }

      .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #e50914, #ff1a1a);
        width: 0%;
        transition: width 0.3s ease;
      }

      .status-message {
        padding: 1rem;
        border-radius: 5px;
        margin: 1rem 0;
        display: none;
      }

      .file-input {
        display: none;
      }

      @media (max-width: 768px) {
        .card {
          padding: 1.5rem;
        }
      }
    </style>
  </head>
  <body>
    <!-- Navbar -->
    <%- include('header') %>

    <div class="container">
      <!-- Tabs -->
      <%- include('tabs', { activeTab: 'upload' }) %>

      <!-- Subtitle -->
      <div class="mb-4 text-center">
        <p class="lead">Upload your video and make it available for streaming</p>
      </div>
      <!-- UPLOAD CARD -->
      <div class="card">
        <form id="uploadForm" enctype="multipart/form-data">
          <div class="upload-area" id="uploadArea">
            <i class="bi bi-cloud-upload" style="font-size: 48px; color: #e50914; margin-bottom: 1rem;"></i>
            <p>Click here or drag a video file</p>
            <p style="color: #aaa; font-size: 14px">
              Supported: MP4, AVI, MOV, MKV, WebM (max 500MB)
            </p>
          </div>
          <input type="file" id="videoFile" name="video" accept="video/*" class="file-input" />

          <div style="display:flex; gap:1rem; align-items:center; margin-top:1rem;">
            <select id="formatSelect" name="format" style="flex:1; padding:0.5rem; background:#333; color:#fff; border:1px solid #555;">
              <option value="original">Original (no conversion)</option>
              <option value="ts">HLS TS (.ts)</option>
              <option value="fmp4">HLS fMP4 (.mp4)</option>
            </select>
            <button type="submit" class="btn btn-primary btn-sm" id="uploadBtn">
              <i class="bi bi-upload"></i> Upload
            </button>
          </div>

          <div class="progress-bar" id="progressBar">
            <div class="progress-fill" id="progressFill"></div>
          </div>
          <div class="status-message" id="statusMessage"></div>
        </form>
      </div>
    </div>

    <!-- Footer -->
    <%- include('footer') %>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

    <script>
      const uploadArea = document.getElementById("uploadArea");
      const fileInput = document.getElementById("videoFile");
      const uploadForm = document.getElementById("uploadForm");
      const progressBar = document.getElementById("progressBar");
      const progressFill = document.getElementById("progressFill");
      const statusMessage = document.getElementById("statusMessage");
      const uploadBtn = document.getElementById("uploadBtn");

      function formatFileSize(bytes) {
        if (bytes === 0) return "0 Bytes";
        const k = 1024;
        const sizes = ["Bytes", "KB", "MB", "GB"];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
      }

      function handleFileSelect() {
        const file = fileInput.files[0];
        if (file) {
          // Clear error/status message when selecting new file
          statusMessage.textContent = "";
          statusMessage.style.display = "none";
          uploadArea.innerHTML = `
            <i class="bi bi-check-circle" style="font-size: 48px; color: #4caf50; margin-bottom: 1rem;"></i>
            <p style="font-size: 18px; margin-bottom: 0.5rem;">File selected:</p>
            <p style="color: #e50914; font-weight: 500;">${file.name}</p>
            <p style="color: #aaa; font-size: 14px;">Size: ${formatFileSize(file.size)}</p>
          `;
        }
      }

      uploadArea.addEventListener("click", () => fileInput.click());
      uploadArea.addEventListener("dragover", (e) => {
        e.preventDefault();
        uploadArea.classList.add("dragover");
      });
      uploadArea.addEventListener("dragleave", () => uploadArea.classList.remove("dragover"));
      uploadArea.addEventListener("drop", (e) => {
        e.preventDefault();
        uploadArea.classList.remove("dragover");
        if (e.dataTransfer.files.length > 0) {
          fileInput.files = e.dataTransfer.files;
          handleFileSelect();
        }
      });

      fileInput.addEventListener("change", handleFileSelect);

      uploadForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        const file = fileInput.files[0];
        if (!file) {
          showStatus("Please select a video file.", "error");
          return;
        }
        const format = document.getElementById("formatSelect").value;
        const formData = new FormData();
        formData.append("video", file);

        let uploadUrl = "/upload/original";
        if (format === "ts") uploadUrl = "/upload/ts";
        else if (format === "fmp4") uploadUrl = "/upload/fmp4";

        progressBar.style.display = "block";
        progressFill.style.width = "0%";
        uploadBtn.disabled = true;

        try {
          const xhr = new XMLHttpRequest();
          
          xhr.upload.addEventListener("progress", (e) => {
            if (e.lengthComputable) {
              const percentComplete = (e.loaded / e.total) * 100;
              progressFill.style.width = percentComplete + "%";
            }
          });

          xhr.addEventListener("load", () => {
            progressFill.style.width = "100%";
            setTimeout(() => {
              if (xhr.status === 200) {
                const data = JSON.parse(xhr.responseText);
                if (data.success) {
                  showStatus("Video uploaded successfully!", "success");
                  window.location.reload();
                } else {
                  showStatus(data.error || "Upload failed", "error");
                }
              } else {
                showStatus("Upload failed", "error");
              }
              progressBar.style.display = "none";
              uploadBtn.disabled = false;
            }, 500);
          });

          xhr.addEventListener("error", () => {
            showStatus("Server error", "error");
            progressBar.style.display = "none";
            uploadBtn.disabled = false;
          });

          xhr.open("POST", uploadUrl);
          xhr.send(formData);
        } catch (err) {
          showStatus("Client error", "error");
          progressBar.style.display = "none";
          uploadBtn.disabled = false;
        }
      });

      function showStatus(msg, type) {
        statusMessage.textContent = msg;
        statusMessage.className = `status-message status-${type}`;
        statusMessage.style.display = "block";
      }
    </script>
  </body>
</html>
