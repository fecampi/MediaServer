<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Media Server HLS - Videos</title>

    <!-- Bootstrap CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />

    <!-- AG Grid CSS -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/ag-grid-community/styles/ag-grid.css"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/ag-grid-community/styles/ag-theme-alpine-dark.css"
    />

    <style>
      /* AG Grid Custom Theme */
      .ag-theme-alpine-dark {
        --ag-background-color: rgba(30, 30, 30, 0.95) !important;
        --ag-border-color: rgba(255, 255, 255, 0.08) !important;
        --ag-header-background-color: rgba(40, 40, 40, 0.95) !important;
        --ag-header-foreground-color: #fff !important;
        --ag-data-color: #fff !important;
        --ag-secondary-foreground-color: #aaa !important;
        --ag-row-hover-color: rgba(44, 44, 44, 0.95) !important;
        --ag-selected-row-background-color: rgba(229, 9, 20, 0.1) !important;
        --ag-range-selection-background-color: rgba(229, 9, 20, 0.1) !important;
        --ag-foreground-color: #fff !important;
        --ag-disabled-foreground-color: #666 !important;
        --ag-odd-row-background-color: rgba(30, 30, 30, 0.8) !important;
        --ag-even-row-background-color: rgba(35, 35, 35, 0.8) !important;
        --ag-row-border-color: rgba(255, 255, 255, 0.05) !important;
        --ag-header-height: 40px !important;
        --ag-row-height: 40px !important;
        font-family: "Roboto", sans-serif !important;
        border-radius: 16px !important;
        overflow: hidden !important;
        backdrop-filter: blur(4px) saturate(110%) !important;
        -webkit-backdrop-filter: blur(4px) saturate(110%) !important;
        box-shadow: 0 4px 24px rgba(0, 0, 0, 0.35) !important;
        border: 1px solid rgba(255, 255, 255, 0.08) !important;
      }

      .ag-theme-alpine-dark .ag-header {
        border-bottom: 1px solid #333 !important;
        font-weight: 600 !important;
        letter-spacing: 0.5px !important;
        background-color: rgba(40, 40, 40, 0.95) !important;
      }

      .ag-theme-alpine-dark .ag-header-cell {
        background-color: rgba(40, 40, 40, 0.95) !important;
        color: #fff !important;
      }

      .ag-theme-alpine-dark .ag-cell {
        border-right: 1px solid rgba(255, 255, 255, 0.03) !important;
        word-break: break-all !important;
        vertical-align: middle !important;
        background-color: inherit !important;
        color: #fff !important;
      }

      .ag-theme-alpine-dark .ag-cell:last-child {
        border-right: none !important;
      }

      .ag-theme-alpine-dark .ag-row {
        background-color: rgba(30, 30, 30, 0.8) !important;
      }

      .ag-theme-alpine-dark .ag-row:nth-child(even) {
        background-color: rgba(35, 35, 35, 0.8) !important;
      }

      .ag-theme-alpine-dark .ag-row-hover {
        background-color: rgba(44, 44, 44, 0.95) !important;
      }

      .ag-theme-alpine-dark .ag-paging-panel {
        background-color: rgba(40, 40, 40, 0.95) !important;
        color: #fff !important;
        border-top: 1px solid rgba(255, 255, 255, 0.08) !important;
      }

      .ag-theme-alpine-dark .ag-paging-button {
        background-color: rgba(255, 255, 255, 0.08) !important;
        color: #fff !important;
        border: none !important;
      }

      .ag-theme-alpine-dark .ag-paging-button:hover {
        background-color: rgba(255, 255, 255, 0.18) !important;
        color: #fff !important;
      }

      /* Custom button styles */
      .btn-custom {
        background-color: transparent;
        color: #aaa;
        border: none;
        padding: 6px 8px;
        border-radius: 3px;
        cursor: pointer;
        font-size: 14px;
        transition: all 0.3s ease;
        margin-right: 4px;
      }

      .btn-custom:hover {
        background-color: rgba(255, 255, 255, 0.1);
        color: #fff;
      }

      .btn-custom:last-child {
        margin-right: 0;
      }

      /* Stream URL cell styling */
      .stream-url-cell {
        background: #f5f5f5;
        color: #222;
        border-radius: 4px;
        padding: 4px 8px;
        font-size: 13px;
        word-break: break-all;
        font-family: monospace;
        white-space: pre-wrap;
      }

      /* Video info cell styling */
      .video-info-cell {
        font-size: 12px;
        color: #ccc;
        line-height: 1.4;
      }

      .video-info-cell b {
        color: #e50914;
      }

      /* Empty state */
      .empty-state {
        text-align: center;
        color: #aaa;
        padding: 3rem 1rem;
      }

      .empty-state i {
        font-size: 64px;
        margin-bottom: 1rem;
        color: #555;
      }

      @media (max-width: 768px) {
        .card {
          padding: 1.5rem;
        }
        .ag-theme-alpine-dark {
          --ag-header-height: 35px !important;
          --ag-row-height: 35px !important;
          font-size: 14px !important;
        }
      }
    </style>
  </head>
  <body>
    <!-- Navbar -->
    <%- include('header') %>

    <div class="container" style="padding-bottom: 20px">
      <!-- Tabs -->
      <%- include('tabs', { activeTab: 'videos' }) %>

      <!-- Subtitle -->
      <div class="mb-4 text-center">
        <p class="lead">Here are the videos available for streaming</p>
      </div>

      <!-- VIDEO LIST CARD -->
      <div class="card" style="margin-bottom: 120px">
        <div
          id="videoGrid"
          class="ag-theme-alpine-dark"
          style="height: 500px; width: 100%; background: rgba(30, 30, 30, 0.95)"
        ></div>
      </div>
    </div>

    <!-- Footer -->
    <%- include('footer') %>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

    <!-- AG Grid JS -->
    <script src="https://cdn.jsdelivr.net/npm/ag-grid-community/dist/ag-grid-community.min.js"></script>

    <script>
      let gridApi;

      // Column definitions
      const columnDefs = [
        {
          headerName: "ID",
          field: "id",
          sortable: true,
          filter: true,
          flex: 1,
          minWidth: 100,
        },
        {
          headerName: "Name",
          field: "originalName",
          sortable: true,
          filter: true,
          flex: 2,
          minWidth: 150,
        },
        {
          headerName: "Date",
          field: "uploadDate",
          sortable: true,
          filter: true,
          flex: 1,
          minWidth: 120,
          valueFormatter: (params) => {
            return new Date(params.value).toLocaleDateString("en-US");
          },
        },
        {
          headerName: "Type",
          field: "segmentType",
          sortable: true,
          filter: true,
          flex: 1,
          minWidth: 80,
          valueFormatter: (params) => {
            return params.value === "original"
              ? "Original"
              : params.value.toUpperCase();
          },
        },
        {
          headerName: "Video Info",
          field: "videoInfo",
          flex: 2,
          minWidth: 200,
          cellRenderer: (params) => {
            const video = params.data;
            let info = "";
            if (video.videoCodec) {
              info += `<b>Video:</b> ${video.videoCodec}`;
              if (video.width && video.height) {
                info += ` ${video.width}x${video.height}`;
              }
              if (video.fps) {
                info += ` ${Math.round(video.fps * 10) / 10}fps`;
              }
              info += "<br />";
            }
            info += `<b>Audio:</b> ${video.audioCodec || "N/A"}<br />`;
            if (video.duration) {
              const minutes = Math.floor(video.duration / 60);
              const seconds = ("0" + Math.floor(video.duration % 60)).slice(-2);
              info += `<b>Duration:</b> ${minutes}:${seconds} min<br />`;
            }
            if (video.bitrate) {
              info += `<b>Bitrate:</b> ${Math.round(
                video.bitrate / 1000
              )} kbps`;
            }
            return `<div class="video-info-cell">${info}</div>`;
          },
        },
        {
          headerName: "Stream URL",
          field: "hlsUrl",
          flex: 1,
          minWidth: 80,
          cellRenderer: (params) => {
            const url = window.location.origin + params.value;
            return `<button class="btn-custom" title="${url}" onclick="copyUrl('${url}')"><i class="bi bi-clipboard"></i></button>`;
          },
        },
        {
          headerName: "Actions",
          field: "actions",
          flex: 1,
          minWidth: 80,
          cellRenderer: (params) => {
            const video = params.data;
            return `
              <button class="btn-custom" title="Delete Video" onclick="deleteVideo('${video.id}')">
                <i class="bi bi-trash"></i>
              </button>
            `;
          },
          sortable: false,
          filter: false,
        },
      ];

      // Grid options
      const gridOptions = {
        columnDefs: columnDefs,
        rowData: [],
        defaultColDef: {
          resizable: true,
          sortable: true,
          filter: true,
        },
        pagination: true,
        paginationPageSize: 10,
        paginationPageSizeSelector: [10, 20, 50],
        animateRows: true,
        enableCellTextSelection: true,
        suppressRowClickSelection: true,
        theme: "ag-theme-alpine-dark",
        overlayNoRowsTemplate: `
          <div class="empty-state">
            <i class="bi bi-film"></i><br />
            No videos yet. Upload the first one!
          </div>
        `,
      };

      // Function to load videos dynamically
      async function loadVideos() {
        try {
          const res = await fetch("/api/videos");
          const data = await res.json();
          const videos = data.videos || data;

          if (gridApi) {
            gridApi.setGridOption("rowData", videos);
          }
        } catch (err) {
          console.error("Error loading videos:", err);
          if (gridApi) {
            gridApi.setGridOption("rowData", []);
          }
        }
      }

      // Function to copy URL
      function copyUrl(url) {
        navigator.clipboard.writeText(url).then(
          () => {
            alert("URL copied to clipboard!");
          },
          () => {
            alert("Failed to copy URL.");
          }
        );
      }

      // Function to delete video
      async function deleteVideo(id) {
        if (!confirm("Are you sure you want to delete this video?")) return;
        try {
          const res = await fetch(`/api/videos/${id}`, {
            method: "DELETE",
          });
          const data = await res.json();
          if (data.success) {
            alert("Video deleted successfully!");
            loadVideos(); // Reload the list
          } else {
            alert(data.error || "Error deleting video.");
          }
        } catch (err) {
          alert("Server error.");
        }
      }

      // Initialize grid when DOM is loaded
      document.addEventListener("DOMContentLoaded", function () {
        const gridDiv = document.querySelector("#videoGrid");
        gridApi = agGrid.createGrid(gridDiv, gridOptions);
        loadVideos();
      });

      // Load videos on page load (fallback)
      window.addEventListener("load", loadVideos);
    </script>
  </body>
</html>
