<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Media Server - HLS Video Streaming</title>

    <!-- Material-UI CSS -->
    <link
      href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/remixicon@4.2.0/fonts/remixicon.css"
      rel="stylesheet"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/@mui/material@5.14.15/umd/material-ui.min.css"
      rel="stylesheet"
    />

    <!-- HLS.js -->
    <script src="https://cdn.jsdelivr.net/npm/hls.js@1.4.12/dist/hls.min.js"></script>

    <style>
      body {
        font-family: "Roboto", sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f5f5f5;
      }

      .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
      }

      .header {
        background: linear-gradient(135deg, #1976d2, #42a5f5);
        color: white;
        padding: 2rem;
        text-align: center;
        margin-bottom: 2rem;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      }

      .upload-section {
        background: white;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin-bottom: 2rem;
      }

      .video-section {
        background: white;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }

      .upload-area {
        border: 2px dashed #1976d2;
        border-radius: 8px;
        padding: 2rem;
        text-align: center;
        margin-bottom: 1rem;
        transition: all 0.3s ease;
        cursor: pointer;
      }

      .upload-area:hover {
        border-color: #42a5f5;
        background-color: rgba(25, 118, 210, 0.05);
      }

      .upload-area.dragover {
        border-color: #42a5f5;
        background-color: rgba(25, 118, 210, 0.1);
      }

      .video-player {
        width: 100%;
        max-width: 800px;
        margin: 1rem auto;
        display: block;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      }

      .video-list {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1rem;
        margin-top: 1rem;
      }

      .video-card {
        background: white;
        border-radius: 8px;
        padding: 1rem;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease;
      }

      .video-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
      }

      .progress-bar {
        width: 100%;
        height: 4px;
        background-color: #e0e0e0;
        border-radius: 2px;
        overflow: hidden;
        margin: 1rem 0;
        display: none;
      }

      .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #1976d2, #42a5f5);
        width: 0%;
        transition: width 0.3s ease;
        animation: pulse 2s infinite;
      }

      @keyframes pulse {
        0% {
          opacity: 1;
        }
        50% {
          opacity: 0.7;
        }
        100% {
          opacity: 1;
        }
      }

      .status-message {
        padding: 1rem;
        border-radius: 4px;
        margin: 1rem 0;
        display: none;
      }

      .status-success {
        background-color: #e8f5e8;
        color: #2e7d32;
        border: 1px solid #4caf50;
      }

      .status-error {
        background-color: #ffebee;
        color: #c62828;
        border: 1px solid #f44336;
      }

      .btn {
        background: linear-gradient(45deg, #1976d2, #42a5f5);
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
        font-weight: 500;
        text-transform: uppercase;
        transition: all 0.3s ease;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
      }

      .btn:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
      }

      .btn:disabled {
        background: #ccc;
        cursor: not-allowed;
        transform: none;
        box-shadow: none;
      }

      .file-input {
        display: none;
      }

      .current-player {
        margin-bottom: 2rem;
      }

      .video-info {
        text-align: center;
        margin-bottom: 1rem;
        color: #666;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="header">
        <h1>
          <i
            class="ri-movie-2-line"
            style="
              color: #1976d2;
              font-size: 2.2rem;
              vertical-align: middle;
              margin-right: 8px;
            "
          ></i>
          Media Server HLS
        </h1>
        <p>Upload videos and watch HLS streaming</p>
      </div>

      <div
        class="capture-section upload-section"
        style="background: white; color: #222; margin-bottom: 2rem"
      >
        <h2 style="color: #1976d2; margin-bottom: 1.5rem">
          <i
            class="ri-download-cloud-2-line"
            style="font-size: 2rem; vertical-align: middle; margin-right: 8px"
          ></i>
          Capture HLS Stream
        </h2>
        <form
          id="captureForm"
          style="
            display: flex;
            flex-wrap: wrap;
            gap: 1.5rem;
            align-items: flex-end;
          "
        >
          <div style="flex: 2 1 320px; min-width: 220px">
            <label for="captureUrl" style="font-weight: 500; color: #222"
              >HLS Manifest URL (.m3u8)</label
            >
            <input
              type="text"
              id="captureUrl"
              name="captureUrl"
              placeholder="https://.../playlist.m3u8"
              style="
                width: 100%;
                padding: 0.7rem 1rem;
                border-radius: 4px;
                border: 1px solid #ccc;
                background: #f5f5f5;
                color: #222;
                font-size: 1rem;
                margin-top: 0.3rem;
              "
            />
          </div>
          <div style="flex: 1 1 180px; min-width: 160px">
            <label for="captureDuration" style="font-weight: 500; color: #222"
              >Capture Duration</label
            >
            <select
              id="captureDuration"
              name="captureDuration"
              style="
                width: 100%;
                padding: 0.7rem 1rem;
                border-radius: 4px;
                border: 1px solid #ccc;
                background: #f5f5f5;
                color: #222;
                font-size: 1rem;
                margin-top: 0.3rem;
              "
            >
              <option value="60">1 minute</option>
              <option value="300">5 minutes</option>
              <option value="600">10 minutes</option>
              <option value="1800">30 minutes</option>
              <option value="3600">1 hour</option>
              <option value="all">Full</option>
            </select>
          </div>
          <div style="flex: 1 1 180px; min-width: 160px">
            <label for="captureFormat" style="font-weight: 500; color: #222"
              >Format</label
            >
            <select
              id="captureFormat"
              name="captureFormat"
              style="
                width: 100%;
                padding: 0.7rem 1rem;
                border-radius: 4px;
                border: 1px solid #ccc;
                background: #f5f5f5;
                color: #222;
                font-size: 1rem;
                margin-top: 0.3rem;
              "
            >
              <option value="original">Original (no conversion)</option>
              <option value="ts">HLS TS (.ts)</option>
              <option value="fmp4">HLS fMP4 (.mp4)</option>
            </select>
          </div>
          <div style="flex: 0 1 160px; min-width: 120px">
            <button
              type="submit"
              class="btn"
              style="
                width: 100%;
                background: linear-gradient(45deg, #1976d2, #42a5f5);
                color: #fff;
              "
            >
              <i
                class="ri-download-2-line"
                style="vertical-align: middle; margin-right: 8px"
              ></i
              >Capture
            </button>
          </div>
        </form>
        <div id="captureStatus" style="margin-top: 1.5rem; display: none"></div>
      </div>

      <div class="upload-section" style="background: white; color: #222">
        <h2 style="color: #1976d2">
          <i
            class="ri-upload-cloud-2-line"
            style="font-size: 2rem; vertical-align: middle; margin-right: 8px"
          ></i>
          Video Upload
        </h2>
        <form id="uploadForm" enctype="multipart/form-data">
          <div
            class="upload-area"
            id="uploadArea"
            style="border: 2px dashed #1976d2; background: #f5f5f5; color: #222"
          >
            <div
              class="material-icons"
              style="font-size: 48px; color: #1976d2; margin-bottom: 1rem"
            >
              cloud_upload
            </div>
            <p style="font-size: 18px; margin-bottom: 0.5rem">
              Click here or drag a video file
            </p>
            <p style="color: #666; font-size: 14px">
              Supported formats: MP4, AVI, MOV, WMV, FLV, WebM, MKV
            </p>
            <p style="color: #666; font-size: 12px">Max size: 500MB</p>
          </div>
          <input
            type="file"
            id="videoFile"
            name="video"
            accept="video/*"
            class="file-input"
          />
          <div style="margin: 1rem 0; text-align: center">
            <label
              for="formatSelect"
              style="font-weight: 500; margin-right: 0.5rem; color: #222"
              >Output format:</label
            >
            <select
              id="formatSelect"
              name="format"
              style="
                padding: 0.5rem 1rem;
                border-radius: 4px;
                border: 1px solid #ccc;
                font-size: 1rem;
                background: #f5f5f5;
                color: #222;
              "
            >
              <option value="original">Original (no conversion)</option>
              <option value="ts">HLS TS (.ts)</option>
              <option value="fmp4">HLS fMP4 (.mp4)</option>
            </select>
          </div>
          <div class="progress-bar" id="progressBar">
            <div class="progress-fill" id="progressFill"></div>
          </div>
          <div class="status-message" id="statusMessage"></div>
          <button type="submit" class="btn" id="uploadBtn">
            <i
              class="ri-upload-2-line"
              style="vertical-align: middle; margin-right: 8px"
            ></i>
            UPLOAD
          </button>
        </form>
      </div>

      <div class="video-section">
        <h2 style="color: #1976d2">
          <i
            class="ri-play-list-2-line"
            style="
              font-size: 2rem;
              vertical-align: middle;
              color: #1976d2;
              margin-right: 8px;
            "
          ></i>
          Available Streams
        </h2>
        <div style="overflow-x: auto">
          <table
            class="video-table"
            style="width: 100%; border-collapse: collapse; margin-top: 1rem"
          >
            <thead>
              <tr style="background: #f5f5f5">
                <th
                  style="
                    padding: 8px;
                    border-bottom: 1px solid #ddd;
                    text-align: left;
                  "
                >
                  Name
                </th>
                <th
                  style="
                    padding: 8px;
                    border-bottom: 1px solid #ddd;
                    text-align: left;
                  "
                >
                  Date
                </th>
                <th
                  style="
                    padding: 8px;
                    border-bottom: 1px solid #ddd;
                    text-align: left;
                  "
                >
                  Type
                </th>
                <th
                  style="
                    padding: 8px;
                    border-bottom: 1px solid #ddd;
                    text-align: left;
                  "
                >
                  Video Info
                </th>
                <th
                  style="
                    padding: 8px;
                    border-bottom: 1px solid #ddd;
                    text-align: left;
                  "
                >
                  Stream URL
                </th>
                <!-- Coluna Actions removida -->
              </tr>
            </thead>
            <tbody id="videoList">
              <% if (videos.length === 0) { %>
              <tr>
                <td
                  colspan="4"
                  style="text-align: center; color: #666; padding: 2rem"
                >
                  <i
                    class="ri-movie-2-line"
                    style="font-size: 64px; margin-bottom: 1rem; color: #bbb"
                  ></i
                  ><br />
                  No videos yet. Upload the first one!
                </td>
              </tr>
              <% } else { %> <% videos.forEach(function(video) { %>
              <tr>
                <td style="padding: 8px; word-break: break-all">
                  <%= video.originalName %>
                </td>
                <td style="padding: 8px">
                  <%= new Date(video.uploadDate).toLocaleDateString('en-US') %>
                </td>
                <td style="padding: 8px; text-transform: uppercase">
                  <%= video.segmentType === 'original' ? 'Original' :
                  video.segmentType %>
                </td>
                <td
                  style="
                    padding: 8px;
                    font-size: 12px;
                    color: #444;
                    min-width: 120px;
                  "
                >
                  <% if (video.videoCodec) { %>
                  <b>Video:</b> <%= video.videoCodec %> <%= video.width &&
                  video.height ? video.width + 'x' + video.height : '' %> <%=
                  video.fps ? Math.round(video.fps*10)/10 + 'fps' : '' %><br />
                  <% } %>
                  <b>Audio:</b> <%= video.audioCodec ? video.audioCodec : 'N/A'
                  %><br />
                  <% if (video.duration) { %>
                  <b>Duration:</b> <%= Math.floor(video.duration/60) %>:<%=
                  ('0'+Math.floor(video.duration%60)).slice(-2) %> min<br />
                  <% } %> <% if (video.bitrate) { %>
                  <b>Bitrate:</b> <%= Math.round(video.bitrate/1000) %> kbps <%
                  } %>
                </td>
                <td
                  style="
                    padding: 8px;
                    word-break: break-all;
                    background: #f5f5f5;
                    color: #222;
                    border-radius: 4px;
                    font-size: 13px;
                    max-width: 320px;
                  "
                >
                  <%= video.fullUrl %>
                </td>
                <!-- Coluna Actions removida -->
              </tr>
              <% }); %> <% } %>
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <script>
      // HLS Capture
      const captureForm = document.getElementById("captureForm");
      const captureStatus = document.getElementById("captureStatus");
      if (captureForm) {
        captureForm.addEventListener("submit", async function (e) {
          e.preventDefault();
          const url = document.getElementById("captureUrl").value.trim();
          const duration = document.getElementById("captureDuration").value;
          const format = document.getElementById("captureFormat").value;
          if (!url) {
            captureStatus.style.display = "block";
            captureStatus.textContent =
              "Please enter a valid HLS manifest URL.";
            captureStatus.style.color = "#c62828";
            return;
          }
          captureStatus.style.display = "block";
          captureStatus.textContent = "Capturing stream...";
          captureStatus.style.color = "#1976d2";
          try {
            const res = await fetch("/capture", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ url, duration, format }),
            });
            const data = await res.json();
            if (data.success) {
              captureStatus.textContent = "Stream captured successfully!";
              captureStatus.style.color = "#2e7d32";
            } else {
              captureStatus.textContent =
                data.error || "Error capturing stream.";
              captureStatus.style.color = "#c62828";
            }
          } catch (err) {
            captureStatus.textContent = "Server error.";
            captureStatus.style.color = "#c62828";
          }
        });
      }
      // DOM Elements
      const uploadForm = document.getElementById("uploadForm");
      const uploadArea = document.getElementById("uploadArea");
      const fileInput = document.getElementById("videoFile");
      const progressBar = document.getElementById("progressBar");
      const progressFill = document.getElementById("progressFill");
      const statusMessage = document.getElementById("statusMessage");
      const uploadBtn = document.getElementById("uploadBtn");
      const videoPlayer = document.getElementById("videoPlayer");
      const currentPlayer = document.getElementById("currentPlayer");
      const currentVideoName = document.getElementById("currentVideoName");
      const currentVideoDate = document.getElementById("currentVideoDate");
      const videoList = document.getElementById("videoList");
      const videoCount = document.getElementById("videoCount");

      // Upload event listeners
      uploadArea.addEventListener("click", () => fileInput.click());
      uploadArea.addEventListener("dragover", handleDragOver);
      uploadArea.addEventListener("dragleave", handleDragLeave);
      uploadArea.addEventListener("drop", handleDrop);
      fileInput.addEventListener("change", handleFileSelect);
      uploadForm.addEventListener("submit", handleUpload);

      // Drag and drop handlers
      function handleDragOver(e) {
        e.preventDefault();
        uploadArea.classList.add("dragover");
      }

      function handleDragLeave(e) {
        e.preventDefault();
        uploadArea.classList.remove("dragover");
      }

      function handleDrop(e) {
        e.preventDefault();
        uploadArea.classList.remove("dragover");
        const files = e.dataTransfer.files;
        if (files.length > 0) {
          fileInput.files = files;
          handleFileSelect();
        }
      }

      function handleFileSelect() {
        const file = fileInput.files[0];
        if (file) {
          uploadArea.innerHTML = `
                    <i class="ri-checkbox-circle-line" style="font-size: 48px; color: #4caf50; margin-bottom: 1rem;"></i>
                    <p style="font-size: 18px; margin-bottom: 0.5rem;">File selected:</p>
                    <p style="color: #1976d2; font-weight: 500;">${
                      file.name
                    }</p>
                    <p style="color: #666; font-size: 14px;">Size: ${formatFileSize(
                      file.size
                    )}</p>
                `;
        }
      }

      function formatFileSize(bytes) {
        if (bytes === 0) return "0 Bytes";
        const k = 1024;
        const sizes = ["Bytes", "KB", "MB", "GB"];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
      }

      function showStatus(message, type) {
        statusMessage.textContent = message;
        statusMessage.className = `status-message status-${type}`;
        statusMessage.style.display = "block";

        if (type === "success") {
          setTimeout(() => {
            statusMessage.style.display = "none";
          }, 5000);
        }
      }

      function handleUpload(e) {
        e.preventDefault();
        const file = fileInput.files[0];
        if (!file) {
          showStatus("Please select a video file.", "error");
          return;
        }
        const format = document.getElementById("formatSelect").value;
        const formData = new FormData();
        formData.append("video", file);
        // Show progress bar
        progressBar.style.display = "block";
        uploadBtn.disabled = true;
        uploadBtn.innerHTML =
          '<i class="ri-loader-4-line" style="vertical-align: middle; margin-right: 8px;"></i>PROCESSING...';
        // Simulate progress
        let progress = 0;
        const progressInterval = setInterval(() => {
          progress += Math.random() * 30;
          if (progress > 90) progress = 90;
          progressFill.style.width = progress + "%";
        }, 500);
        let uploadUrl = "/upload/original";
        if (format === "ts") uploadUrl = "/upload/ts";
        else if (format === "fmp4") uploadUrl = "/upload/fmp4";
        fetch(uploadUrl, {
          method: "POST",
          body: formData,
        })
          .then((response) => response.json())
          .then((data) => {
            clearInterval(progressInterval);
            progressFill.style.width = "100%";
            if (data.success) {
              showStatus(
                "Video successfully converted! You can watch it now.",
                "success"
              );
              addVideoToList(data.video);
              resetUploadForm();
              setTimeout(() => {
                playVideo(
                  data.video.hlsUrl,
                  data.video.originalName,
                  data.video.uploadDate
                );
              }, 1000);
            } else {
              showStatus(data.error || "Video upload error.", "error");
            }
          })
          .catch((error) => {
            clearInterval(progressInterval);
            console.error("Error:", error);
            showStatus("Server communication error.", "error");
          })
          .finally(() => {
            uploadBtn.disabled = false;
            uploadBtn.innerHTML =
              '<i class="ri-upload-2-line" style="vertical-align: middle; margin-right: 8px;"></i>UPLOAD';
            setTimeout(() => {
              progressBar.style.display = "none";
              progressFill.style.width = "0%";
            }, 2000);
          });
      }

      function resetUploadForm() {
        fileInput.value = "";
        uploadArea.innerHTML = `
                <i class="ri-upload-cloud-2-line" style="font-size: 48px; color: #1976d2; margin-bottom: 1rem;"></i>
                <p style="font-size: 18px; margin-bottom: 0.5rem;">Click here or drag a video file</p>
                <p style="color: #666; font-size: 14px;">Supported formats: MP4, AVI, MOV, WMV, FLV, WebM, MKV</p>
                <p style="color: #666; font-size: 12px;">Max size: 500MB</p>
            `;
      }
    </script>
  </body>
</html>
